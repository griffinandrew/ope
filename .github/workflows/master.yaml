name: master test
on:
  push:
    branches:
      - container-base-ope

jobs:
  setup-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4 #use action to install python
        with:
          python-version: "3.9"
      - name: Install dependencies #requirements docs unable to read, hard installing dependencies 
        run: |
          pip install -r requirements/requirements.txt     
          cp tests/version-check.py ./version-check.py #add python script to compare vers to this file
          cp tests/versions.txt ./versions.txt #add correct version list to compare against
          cp tests/test.ipynb ./test.ipynb
          chmod +x ./version-check.py # change perms to execute
          chmod +x ./test.ipynb 
          ls
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build
        run: |
          start=$(date +%s) #start the timer
          time make build --silent 
          end=$(date +%s) #end timer
          seconds=$((end-start))  #calc build time in sec
          elapsed=$(echo "scale=2; ($end - $start) / 60.0" | bc) #get time in min with dec
          min=${elapsed%.*}  #extract min part 
          sec_cut=${elapsed#*.} #get the decimal 
          sec_round="${sec_cut:0:1}.${sec_cut:1}"
          sec=$( echo "$sec_round * 6" | bc -l) #calc sec's
          echo "BUILD TIME:  $min MIN $sec SECS  or  $seconds seconds" > ./time.txt #send to file for use in diff run
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1) #get built image
          echo "Image = $IMAGE"
          echo $IMAGE > image.txt   
      - name: upload image
        uses: actions/upload-artifact@v2
        with:
          name: image
          path: |
            image.txt


      - name: upload time
        uses: actions/upload-artifact@v2
        with:
          name: time
          path: |
            time.txt

      - name: upload vers-check
        uses: actions/upload-artifact@v2
        with:
          name: vers-check
          path: |
            version-check.py

      - name: upload vers.txt
        uses: actions/upload-artifact@v2
        with:
          name: vers
          path: |
            versions.txt

      - name: upload test
        uses: actions/upload-artifact@v2
        with:
          name: test
          path: |
            test.ipynb


  health-check:
    needs: setup-and-build
    runs-on: ubuntu-latest
    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: image
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: time
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: vers-check
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: vers
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: test

      - name: pull image
        run: |
          IMAGE=$(cat image.txt)
          docker pull $IMAGE

      - name: check-container-health
        run: |
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1) #get built image
          echo "image = $IMAGE "
          docker run -d --name stable $IMAGE 
          sleep 7 #wait to start to check health
          docker ps -a
          CONTAINER_NAME="stable"
          HEALTH=$(docker ps --format "{{.Names}}: {{.Status}}" | grep "$CONTAINER_NAME" | awk '{print $2}') #extract health status
          echo ""
          if [[ "$HEALTH" == "Up" ]]; then
          echo "HEALTHY : container is up and running"
          else
          echo "ERROR : container is not running"
          exit -1
          fi
          echo ""
          docker stop stable

  image-version-check:
    needs: setup-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: image
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: vers-check
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: vers
      - name: pull image
        run: |
          IMAGE=$(cat image.txt)
          docker pull $IMAGE

      - name: check-container-health
        run: |
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1) #get just built image
          echo "IMAGE = $IMAGE"
          docker run -d --name stable $IMAGE
          ID=$( docker ps -aqf "name=stable" )     #get id of image
          docker inspect $IMAGE > image.json #right inspect info to json for parsing
          REPO_TAG=$(jq -r '.[0].RepoTags[0]' image.json) #acquire tag
          if [[ "$REPO_TAG" == "$IMAGE" ]]; then
                echo "CORRECT IMAGE AND VERSION"
          else
                echo "INCORRECT IMAGE or VERSION, $REPO_TAG is not the proper image $IMAGE"
                exit -1
          fi

  jupnb-test:
    needs: setup-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: image
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: test
      - name: pull image
        run: |
          IMAGE=$(cat image.txt)
          docker pull $IMAGE
      - name: run container
        run: |
          pip install jupytext
          chmod +x  test.ipynb 
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
          docker run -d -p 8888:8888 --name stable $IMAGE
          container_id=$(docker ps -qf "name=stable" | head -n 1)
          docker cp test.ipynb $container_id:/home/jovyan/work #mount test nb into container
      - name: Wait for container to start
        run: |
          until docker exec stable jupyter lab --version; do sleep 1; done
      - name: Execute Notebook
        run: |
          container_id=$(docker ps -qf "name=stable" | head -n 1)
          echo $container_id
          docker exec $container_id jupyter lab --generate-config
          docker exec $container_id sh -c "echo 'c.NotebookApp.token = \"\"' >> /home/jovyan/.jupyter/jupyter_notebook_config.py" #create it without a token
          docker exec $container_id jupyter labextension install @jupyter-widgets/jupyterlab-manager #install widgets
          docker exec $container_id pip install nbclient
          docker exec $container_id jupyter lab build --minimize=False
          echo "running notebook"
          docker exec $container_id jupyter execute /home/jovyan/work/test.ipynb >> ./output.txt
          sleep 5
          HEALTH=$(docker ps --format "{{.Names}}: {{.Status}}" | grep "stable" | awk '{print $2}')
          docker ps -a
          echo ""
          if [[ "$HEALTH" == "Up" ]]; then
          echo "container healthy"
          else
          echo ""
          cat ./output.txt
          exit -1
          fi
          echo ""
          echo "************SUCCESS***********"
      - name: Stop Docker container
        run: docker stop stable



  package-vers-test:
    needs: setup-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: image
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: vers-check
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: vers
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: test
      - name: pull image
        run: |
          IMAGE=$(cat image.txt)
          docker pull $IMAGE
      - name: checkout package versions
        run: |
          VERS_PY=$(cat version-check.py)
          VERS_TXT=$(cat versions.txt)
          echo $VERS_PY $VERS_TXT
          chmod +x version-check.py
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1) #get image name
          docker run -d --name stable $IMAGE
          sleep 7 # let properly start
          ID=$( docker ps -aqf "name=stable" )
          docker exec stable pip list >> ./list.txt #get rid of header for python comparison test
          tail -n +3 ./list.txt > temp.txt
          mv ./temp.txt ./list.txt #rewrite truncated list to file
          python3 version-check.py ./list.txt versions.txt #send to python for checking
          docker stop stable
  
  checksum:
    needs: setup-and-build
    runs-on: ubuntu-latest
    steps:
      - name: run checksum #creates var with checksum value to be compared 
        run: |
          PERMISSIONS_CHECKSUM=$(make checksum)
          SUM=$PERMISSIONS_CHECKSUM
          QUICK_TRIM=${SUM::64} #quick_trim is used to get rid of the tailing "-" after the checksum
          echo $QUICK_TRIM
          CHECKSUM=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
          if [[ "$QUICK_TRIM" == "$CHECKSUM" ]]; then
            echo "******SUCCESS********" 
          else 
            echo "*******FAILURE*******"
            echo "image checksum: $QUICK_TRIM"
            echo "correct checksum: $CHECKSUM"
            exit 1
          fi

  size-time:
    needs: setup-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: image

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: time

      - name: pull image
        run: |
          IMAGE=$(cat image.txt)
          docker pull $IMAGE 

      - name: extract size and display time and size
        run: |
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
          echo "$IMAGE"
          docker run -d --name stable $IMAGE 
          SIZE=$( docker images --format "{{.Size}}" $IMAGE ) #extract size from running image
          echo ""
          echo ""
          cat time.txt #display calced time
          echo "" 
          echo "IMAGE SIZE:  $SIZE" #display size in GB
          echo ""
          docker stop stable
